// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shows help message on '$ mm build -h' 1`] = `
"Prepare all source files, stylesheets, and asset files to be served with \`mm serve\`.

Usage:

$ mm build [--analyze]

Details:

\`mm build\` will compile all of your code, stylesheets, etc. into static files 
that browsers can understand. The files will be placed into the ./build folder.

Running \`mm serve\` will serve these static files and run Node helpers as needed 
based on the config.

\`mm build\` can take a long time, but it performs optimizations that make the 
application load and run faster.

Examples:

build files for \`mm serve\`
  $ yarn mm build

show information about the compiled files after building
  $ yarn mm build --analyze"
`;

exports[`shows help message on '$ mm check -h' 1`] = `
"Check your files for problems.

Usage:

$ mm check [--all] ...

Details:

\`mm check\` checks your files for potential problems with ESLint.

Examples:

Check your config and source files
  $ yarn mm check

Only check one or more modules
  $ yarn mm check calendar clock

Check your config, source files, and entire modules directory
  $ yarn mm check --all"
`;

exports[`shows help message on '$ mm serve -h' 1`] = `
"Serve prebuilt files and run Node helpers.

Usage:

$ mm serve [--rebuild] [--view] [--browser]

Details:

\`mm serve\` will serve files previously built with \`mm build\` and run Node 
helpers as needed based on the config. If necessary, \`mm build\`will be run 
automatically.

Unlike \`mm start\`, \`mm serve\` doesn't automatically update on file changes.

\`mm view\` can connect to \`mm serve\` on another device.

(Compare \`mm serve\` to \`npm run serveronly\` in MM2.)

Examples:

serve for another device
  $ yarn mm serve

always run \`mm build\` before serving
  $ yarn mm serve --rebuild

serve and view in Electron on the same device
  $ yarn mm serve --view

serve and view in a browser on the same device
  $ yarn mm serve --browser"
`;

exports[`shows help message on '$ mm start -h' 1`] = `
"Start the app and instantly see changes to your source files.

Usage:

$ mm start [--no-view] [--browser]

Details:

\`mm start\` compiles your files on the fly and updates the app instantly as you 
update your code or config.

Use it to quickly configure your mirror or develop your module before optimizing 
performance with \`mm build\`.

Examples:

Start with live updates
  $ yarn mm start

Start in a browser instead of Electron
  $ yarn mm start --browser

Start to be viewed on another device with \`mm view\`
  $ yarn mm start --no-view"
`;

exports[`shows help message on '$ mm' 1`] = `
"MagicMirror CLI - 0.2.0

  $ mm <command>

Where <command> is one of:

  mm build [--analyze]
    Prepare all source files, stylesheets, and asset files to be served with \`mm serve\`.

  mm check [--all] ...
    Check your files for problems.

  mm serve [--rebuild] [--view] [--browser]
    Serve prebuilt files and run Node helpers.

  mm start [--no-view] [--browser]
    Start the app and instantly see changes to your source files.

  mm view [--address,-a #0] [--port,-p #0] [--url,-u #0]
    Connect to \`mm serve\` and display the application.

You can also print more details about any of these commands by calling them 
after adding the \`-h,--help\` flag right after the command name."
`;
